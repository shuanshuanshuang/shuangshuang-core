<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.dongnaoedu</groupId>
		<artifactId>dongnao-mall</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>mall-parent</artifactId>

	<packaging>pom</packaging>

	<name>mall Parent</name>
	<description>mall Spring Boot Parent</description>

	<!-- 配置 maven deploy 地址 -->
	<distributionManagement>
		<repository>
			<id>nexus-releases</id>
			<name>Nexus Release Repository</name>
			<url>http://192.168.100.102:8081/nexus/repository/maven-releases/</url>
		</repository>
		<snapshotRepository>
			<id>nexus-snapshots</id>
			<name>Nexus Snapshot Repository</name>
			<url>http://192.168.100.102:8081/nexus/repository/maven-snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<!-- 设定主仓库，按设定顺序进行查找 -->
	<repositories>
		<repository>
			<id>nexus</id>
			<!-- 
			<url>http://maven.aliyun.com/nexus/content/groups/public/</url> -->
			<url>http://192.168.100.102:8081/nexus/repository/maven-public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<!-- 设定插件仓库 -->
	<pluginRepositories>
		<pluginRepository>
			<id>nexus</id>
			<url>http://maven.aliyun.com/nexus/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<!-- 项目属性 -->
	<properties>
		<java.version>1.8</java.version>
		<java.source.version>1.8</java.source.version>
		<java.target.version>1.8</java.target.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- 私有 Docker Registry -->
		<docker.repo>192.168.30.109:5000</docker.repo>

		<spring-boot.version>2.0.3.RELEASE</spring-boot.version>
		<mybatis.starter.version>1.3.2</mybatis.starter.version>
		<pagehelper.starter.version>1.2.5</pagehelper.starter.version>
		<druid.starter.version>1.1.10</druid.starter.version>
		<dubbo.starter.version>0.2.0</dubbo.starter.version>

		<mysql.jdbc.version>5.1.46</mysql.jdbc.version>
		<springfox.swagger2.version>2.9.2</springfox.swagger2.version>
		<jedis.version>2.9.0</jedis.version>
		<hutool.version>4.0.5</hutool.version>

		<!--指定了版本范围，每次会尝试去下载最新版本 -->
		<elasticsearch.version>6.4.0</elasticsearch.version>
		<joda-time.version>2.9.9</joda-time.version>
		<jstl.version>1.2</jstl.version>
		<servlet-api.version>3.1.0</servlet-api.version>
		<jsp-api.version>2.1</jsp-api.version>
		<commons-fileupload.version>1.3.3</commons-fileupload.version>
		<commons-lang3.version>3.4</commons-lang3.version>
		<commons-io.version>2.4</commons-io.version>
		<commons-net.version>3.5</commons-net.version>
		<httpclient.version>4.5.3</httpclient.version>
		<json.version>20171018</json.version>
		<gson.version>2.8.5</gson.version>
		<slf4j.version>1.7.25</slf4j.version>
	
		<shiro.version>1.4.0</shiro.version>
		<fastdfs.version>1.27</fastdfs.version>
		<dubbo.version>2.6.2</dubbo.version>
		<zkclient.version>0.7</zkclient.version>
		<zookeeper.version>3.4.14</zookeeper.version>
		<curator-framework.version>2.12.0</curator-framework.version>
		<apollo-client.version>1.0.0</apollo-client.version>

		<!-- Maven plugins -->
		<maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
		<maven-compiler-plugin.version>3.6.0</maven-compiler-plugin.version>
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
		<maven-release-plugin.version>2.5.3</maven-release-plugin.version>
		<dockerfile-plugin-version>1.4.0</dockerfile-plugin-version>
	</properties>

	<!-- 依赖管理 -->
	<dependencyManagement>
		<dependencies>
			<!-- Spring Boot
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency> -->
			<!-- mybatis starter -->
			<dependency>
				<groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot-starter</artifactId>
				<version>${mybatis.starter.version}</version>
			</dependency>
			<!-- pagehelper starter -->
			<dependency>
				<groupId>com.github.pagehelper</groupId>
				<artifactId>pagehelper-spring-boot-starter</artifactId>
				<version>${pagehelper.starter.version}</version>
			</dependency>
			<!-- druid starter -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid-spring-boot-starter</artifactId>
				<version>${druid.starter.version}</version>
			</dependency>
			<!-- MySql -->
			<dependency>
			    <groupId>mysql</groupId>
			    <artifactId>mysql-connector-java</artifactId>
			    <version>${mysql.jdbc.version}</version>
			</dependency>
			<!-- fastdfs -->
			<dependency>
				<groupId>cn.bestwu</groupId>
				<artifactId>fastdfs-client-java</artifactId>
				<version>${fastdfs.version}</version>
			</dependency>
			<!-- 时间操作组件 -->
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
			</dependency>
			<!-- Apache工具组件 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-net</groupId>
				<artifactId>commons-net</artifactId>
				<version>${commons-net.version}</version>
			</dependency>
			<!-- Httpclient -->
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${httpclient.version}</version>
			</dependency>
			<!-- 文件上传组件 -->
			<dependency>
				<groupId>commons-fileupload</groupId>
				<artifactId>commons-fileupload</artifactId>
				<version>${commons-fileupload.version}</version>
			</dependency>
			<!-- jedis -->
			<dependency>
				<groupId>redis.clients</groupId>
				<artifactId>jedis</artifactId>
				<version>${jedis.version}</version>
			</dependency>
			<!-- Shiro -->
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-all</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<!-- Elasticsearch client -->
			<dependency>
				<groupId>org.elasticsearch.client</groupId>
				<artifactId>transport</artifactId>
				<version>${elasticsearch.version}</version>
			</dependency>
			<!-- JSP相关 -->
			<dependency>
				<groupId>javax.servlet</groupId>
    			<artifactId>jstl</artifactId>
				<version>${jstl.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jsp-api</artifactId>
				<version>${jsp-api.version}</version>
				<scope>provided</scope>
			</dependency>
			<!-- Hutool工具包 -->
			<dependency>
				<groupId>cn.hutool</groupId>
				<artifactId>hutool-all</artifactId>
				<version>${hutool.version}</version>
			</dependency>
			<!-- Json -->
			<dependency>
				<groupId>org.json</groupId>
				<artifactId>json</artifactId>
				<version>${json.version}</version>
			</dependency>
			<!-- gson -->
			<dependency>
				<groupId>com.google.code.gson</groupId>
				<artifactId>gson</artifactId>
				<version>${gson.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<!-- swagger2 -->
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${springfox.swagger2.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${springfox.swagger2.version}</version>
			</dependency>

			<!-- dubbo starter
			<dependency>
				<groupId>com.alibaba.boot</groupId>
				<artifactId>dubbo-spring-boot-starter</artifactId>
				<version>${dubbo.starter.version}</version>
			</dependency> -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>dubbo-serialization-kryo</artifactId>
				<version>${dubbo.version}</version>
				<exclusions>
					<exclusion>
						<groupId>com.alibaba</groupId>
						<artifactId>dubbo-common</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- Dubbo -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>dubbo</artifactId>
				<version>${dubbo.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.springframework</groupId>
						<artifactId>spring</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.servlet</groupId>
						<artifactId>servlet-api</artifactId>
					</exclusion>
					<exclusion>
						<groupId>log4j</groupId>
						<artifactId>log4j</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<!-- ZK -->
			<dependency>
				<groupId>org.apache.zookeeper</groupId>
				<artifactId>zookeeper</artifactId>
				<version>${zookeeper.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
					<exclusion>
						<groupId>log4j</groupId>
						<artifactId>log4j</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<dependency>
				<groupId>com.101tec</groupId>
				<artifactId>zkclient</artifactId>
				<version>${zkclient.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>slf4j-api</artifactId>
						<groupId>org.slf4j</groupId>
					</exclusion>
					<exclusion>
						<artifactId>log4j</artifactId>
						<groupId>log4j</groupId>
					</exclusion>
					<exclusion>
						<artifactId>slf4j-log4j12</artifactId>
						<groupId>org.slf4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${curator-framework.version}</version>
            </dependency>
            
            <!-- apollo配置中心 -->
			<dependency>
				<groupId>com.ctrip.framework.apollo</groupId>
				<artifactId>apollo-client</artifactId>
				<version>${apollo-client.version}</version>
			</dependency>
            
		</dependencies>
	</dependencyManagement>

	<build>
		<!-- docker 依赖管理 -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>dockerfile-maven-plugin</artifactId>
					<version>${dockerfile-plugin-version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
		
		<plugins>
			<!-- 编译插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.source.version}</source>
					<target>${java.target.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- 允许你创建一系列规则强制大家遵守，包括设定Java版本、设定Maven版本、禁止某些依赖、禁止SNAPSHOT依赖。 
			只要在一个父POM配置规则，然后让大家继承，当规则遭到破坏的时候，Maven就会报错
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-rules</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<version>[1.8,)</version>
								</requireJavaVersion>
								<requireProperty>
									<property>project.name</property>
								</requireProperty>
								<requireProperty>
									<property>project.description</property>
								</requireProperty>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin> -->

			<!-- 对于Maven工程的源代码进行源文件的打包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven-source-plugin.version}</version>
				<executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
			</plugin>

			<!-- 通过maven-surefire-plugin插件执行单元测试 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>  
                	<skip>true</skip>  
            	</configuration>
			</plugin>

			<!-- maven-release-plugin的用途是帮助自动化项目版本发布，它依赖于POM中的SCM信息
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven-release-plugin.version}</version>
				<configuration>
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<useReleaseProfile>false</useReleaseProfile>
					<releaseProfiles>release</releaseProfiles>
					<goals>deploy</goals>
				</configuration>
			</plugin> -->
		</plugins>
	</build>

</project>
